{"version":3,"sources":["constants/point-action-types.js","reducers/points.js","constants/map-action-types.js","reducers/map.js","reducers/index.js","store/store.js","selectors/index.js","components/pointList/pointItem/PointItem.js","components/pointList/PointListView.js","components/pointList/PointListContainer.js","actions/actions.js","components/pointForm/cratePointForm/CreatePointFormView.js","components/pointForm/cratePointForm/CreatePointFormContainer.js","components/map/Route/Route.js","components/map/PointMarkers/PointMarkers.js","components/map/PointInfo/PointInfo.js","components/map/MapView.js","components/map/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["pointActionTypes","ADD_POINT","REMOVE_POINT","CHANGE_ORDER","CHANGE_COORDINATES","initalState","1","id","index","coordinates","lat","lng","name","2","3","mapActionTypes","CHANGE_CENTER","mapCenter","rootReducer","combineReducers","points","state","arguments","length","undefined","action","_action$payload","payload","pointId","newState","_objectSpread","type","newIndex","oldIndex","pointArray","Object","values","element","find","point","sort","a","b","splice","reduce","result","changePointsOrder","newPointId","Date","getTime","toString","keys","stateBeforeRemove","map","mapCenterCoordinates","store","createStore","pointArraySelector","createSelector","PointItem","_ref","removePoint","react_default","createElement","className","data-testid","onClick","getListStyle","isDraggingOver","border","getItemStyle","isDragging","draggableStyle","PointListView_objectSpread","background","PointListView","onDragEnd","pointItems","i","react_beautiful_dnd_esm","key","draggableId","provided","snapshot","assign","ref","innerRef","draggableProps","dragHandleProps","style","pointItem_PointItem","droppableId","droppableProps","placeholder","propTypes","PropTypes","arrayOf","shape","number","string","changePointOrder","func","connect","pointList_PointListView","destination","itemIndex","source","destinationIndex","CreatePointFormView","addPoint","_useState","useState","_useState2","slicedToArray","pointName","setPointName","_useState3","_useState4","inputError","setInputError","concat","value","onChange","event","newPointName","target","onKeyDown","keyCode","shiftKey","cratePointForm_CreatePointFormView","Route","path","push","reactgooglemapsapi_esm","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","PointMarkers","changePointCoordinate","position","latLng","PointInfo","onClose","onCloseClick","fontWeight","DEFAULT_CENTER","DEFAULT_ZOOM","MemoizedMapWithHook","React","memo","props","useGoogleMap","useEffect","addListener","center","setLat","setLng","Fragment","MapView","onChangeMapCenter","_useState5","_useState6","isInfoOpen","setIsInfoOpen","_useState7","_useState8","infoPoint","setInfoPoint","googleMapsApiKey","onCenterChanged","mapContainerStyle","height","width","zoom","PointMarkers_PointMarkers","Route_Route","PointInfo_PointInfo","changeMapCenter","changeCenterObserver","Subject","pipe","debounceTime","subscribe","map_MapView","next","App","es","cratePointForm_CreatePointFormContainer","pointList_PointListContainer","map_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd43e43f.chunk.js","sourcesContent":["export const pointActionTypes = {\r\n    ADD_POINT: '[Point] add point',\r\n    REMOVE_POINT: '[Point] remove point',\r\n    CHANGE_ORDER: '[Point] change order',\r\n    CHANGE_COORDINATES: '[Point] change point coordinate'\r\n}\r\n","import { pointActionTypes } from  '../constants/point-action-types'\r\n\r\nconst initalState = {\r\n    1: {\r\n        id: 1,\r\n        index: 0,\r\n        coordinates: { lat: -41.28, lng: 174.69 },\r\n        name: 'first point'\r\n    },\r\n    2: {\r\n        id: 2,\r\n        index: 1,\r\n        coordinates: { lat: -41.24, lng: 174.74 },\r\n        name: 'second point'\r\n    },\r\n    3: {\r\n        id: 3,\r\n        index: 2,\r\n        coordinates: { lat: -41.30, lng: 174.78 },\r\n        name: 'third point'\r\n    },\r\n}\r\n\r\nfunction changePointsOrder(state, oldIndex, newIndex) {\r\n    const pointArray = Object.values(state)\r\n    const element = pointArray.find(point => point.index === oldIndex)\r\n    pointArray.sort((a, b) => a.index - b.index)    \r\n    pointArray.splice(oldIndex, 1)\r\n    pointArray.splice(newIndex, 0, element)\r\n    return pointArray.reduce((result, point, index) => {\r\n        result[point.id] = { ...point, index }\r\n        return result\r\n    }, {})\r\n}\r\n\r\nexport function pointsReducer(state = initalState, action) {\r\n    const { payload = {} } = action\r\n    const { pointId, coordinates } = payload\r\n    const newState = { ...state }\r\n    switch (action.type) {\r\n        case pointActionTypes.CHANGE_ORDER: \r\n            const { newIndex, oldIndex } = payload\r\n            return changePointsOrder(state, oldIndex, newIndex)\r\n        case pointActionTypes.ADD_POINT:\r\n            const newPointId = +new Date().getTime().toString();\r\n            const { name } = payload            \r\n            newState[newPointId] = { name, coordinates, id: newPointId, index: Object.keys(state).length }\r\n            return newState\r\n        case pointActionTypes.REMOVE_POINT:\r\n            const stateBeforeRemove = { ...state }\r\n            delete stateBeforeRemove[pointId]\r\n            return stateBeforeRemove\r\n        case pointActionTypes.CHANGE_COORDINATES:\r\n            const point = {...state[pointId], coordinates}\r\n            delete newState[pointId]\r\n            newState[pointId] = point\r\n            return newState\r\n        default: \r\n            return state    \r\n    }\r\n}","export const mapActionTypes = {\r\n    CHANGE_CENTER: '[Map] change center'\r\n}","import { mapActionTypes } from '../constants/map-action-types'\r\n\r\nconst initalState = {\r\n    mapCenter: { lat: -41.253, lng: 174.751 }\r\n}\r\n\r\nexport function mapReducer(state = initalState, action) {\r\n    const { payload } = action\r\n    switch (action.type) {\r\n        case mapActionTypes.CHANGE_CENTER: return { mapCenter: payload.mapCenterCoordinates }\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { pointsReducer } from './points.js'\r\nimport { mapReducer } from './map.js'\r\n\r\nexport const rootReducer = combineReducers({\r\n    points: pointsReducer,\r\n    map: mapReducer,\r\n});","import { createStore } from 'redux'\r\nimport { rootReducer } from '../reducers'\r\n\r\nexport const store = createStore(rootReducer)","import { createSelector } from 'reselect'\r\n\r\nexport const pointsSelector = (state) => state.points\r\nexport const mapCenterSelector = (state) => state.map.mapCenter\r\n\r\nexport const pointArraySelector = createSelector(\r\n    pointsSelector,\r\n    points => Object.values(points).sort((a, b) => a.index - b.index)\r\n)","import React from 'react'\r\nimport PropTypes, { number, string } from 'prop-types'\r\nimport './PointItem.scss'\r\n\r\nexport function PointItem({ point, removePoint}) {\r\n    const { name, id } = point\r\n    \r\n    return (\r\n        <div className=\"point-item\">\r\n            <div data-testid=\"task-content\" className=\"point-item__name\">{name}</div>\r\n\t\t    <div className=\"point-item__remove-icon\" onClick={() => removePoint(id)}>x</div>\r\n        </div>          \r\n    )\r\n}\r\n\r\nPointItem.propTypes = {\r\n    point: PropTypes.shape({\r\n        id: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n    })\r\n}\r\n\r\nexport default PointItem","import React from 'react'\r\nimport PointItem from './pointItem/PointItem'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport './PointListView.scss'\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n\tborder: isDraggingOver ? 'dashed 1px gray' : 'solid 1px white'\r\n});\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    background: isDragging ? '#CDDC39' : '#8BC34A',  \r\n    ...draggableStyle\r\n});\r\n\r\nexport function PointListView({ points, onDragEnd, removePoint }) {\r\n\tconst pointItems = points.map((point, i) => (\r\n\t\t<Draggable key={point.id} draggableId={point.id} index={point.index}>\r\n\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t<div \r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\tstyle={getItemStyle(\r\n\t\t\t\t\t\tsnapshot.isDragging,\r\n\t\t\t\t\t\tprovided.draggableProps.style\r\n\t\t\t\t\t)}\r\n\t\t\t\t\tclassName=\"point-item-container\">\r\n\t\t\t\t\t   <PointItem point={point} removePoint={removePoint}/>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t))\r\n\r\n\treturn (\r\n\t\t<div className=\"points-container\">\r\n\t\t\t<span>Маршрут</span>\r\n\t\t\t{(points && points.length) > 0 ? (\r\n\t\t\t\t<DragDropContext onDragEnd={(result) => onDragEnd(result)}>\r\n\t\t\t\t\t<Droppable droppableId=\"droppable\">\r\n\t\t\t\t\t\t{(provided, snapshot) => (\r\n\t\t\t\t\t\t\t<div className=\"points-column\"\r\n\t\t\t\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t\t\t\tstyle={getListStyle(snapshot.isDraggingOver)}\r\n\t\t\t\t\t\t\t\tdata-testid=\"point-column\">\r\n\t\t\t\t\t\t\t\t\t{pointItems}\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Droppable>\r\n\t\t\t\t</DragDropContext>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"empty-point-list\">Список точек пуст</div>\r\n\t\t\t)}\t\t\t\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\n\r\nPointListView.propTypes = {\r\n\tpoints: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n\t})),\r\n\tonDragEnd: func,\r\n\tremovePoint: func,\r\n}\r\n\r\nexport default PointListView\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport { pointArraySelector } from '../../selectors/index'\r\nimport { changePointOrder, removePoint } from '../../actions/actions'\r\nimport PointListView from './PointListView'\r\n\r\nexport function PointListContainer({ points, changePointOrder, removePoint }) {\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n    \r\n        const itemIndex = result.source.index\r\n        const destinationIndex = result.destination.index\r\n        changePointOrder(itemIndex, destinationIndex)\r\n    }\r\n\r\n    return (\r\n        <PointListView \r\n            points={points}\r\n            removePoint={removePoint}\r\n            onDragEnd={onDragEnd}/>\r\n    )\r\n}\r\n\r\nPointListView.propTypes = {\r\n\tpoints: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n    })),\r\n\tchangePointOrder: func,\r\n\tremovePoint: func,\r\n}\r\n\r\nexport default connect(\r\n\t(state) => ({\r\n\t\tpoints: pointArraySelector(state)\r\n\t}),\r\n\t{ changePointOrder, removePoint }\r\n)(PointListContainer)","import { pointActionTypes } from  '../constants/point-action-types'\r\nimport { mapActionTypes } from '../constants/map-action-types'\r\n\r\nexport function addPoint(name, coordinates) {\r\n    return {\r\n        type: pointActionTypes.ADD_POINT,\r\n        payload: { name, coordinates }\r\n    }\r\n}\r\n\r\nexport function removePoint(pointId) {\r\n    return {\r\n        type: pointActionTypes.REMOVE_POINT,\r\n        payload: { pointId }\r\n    }\r\n}\r\n\r\nexport function changePointOrder(oldIndex, newIndex) {\r\n    return {\r\n        type: pointActionTypes.CHANGE_ORDER,\r\n        payload: { oldIndex, newIndex }\r\n    }\r\n}\r\n\r\nexport function changeMapCenter(mapCenterCoordinates) {\r\n    return {\r\n        type: mapActionTypes.CHANGE_CENTER,\r\n        payload: { mapCenterCoordinates }\r\n    }\r\n}\r\n\r\nexport function changePointCoordinate(pointId, coordinates) {\r\n    return {\r\n        type: pointActionTypes.CHANGE_COORDINATES,\r\n        payload: { pointId, coordinates }\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './CreatePointFormView.scss'\r\n\r\nexport function CreatePointFormView({ addPoint }) {\r\n    const [ pointName, setPointName ] = useState('')\r\n    const [ inputError, setInputError]  = useState('')\r\n\r\n    const handleInputChange = (event) => {\r\n        const newPointName = event.target.value\r\n\r\n        if (newPointName.length > 30) {\r\n            setInputError('Длина названия точки - не более 30 символов')\r\n        } else {\r\n            setPointName(newPointName)\r\n            setInputError(null)\r\n        }\r\n    }\r\n    \r\n    const handleInputKeyDown = (event) => {\r\n        if(event.keyCode === 13 && event.shiftKey === false) {\r\n            if (pointName) {\r\n                addPoint(pointName)\r\n                setPointName('')\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`add-point-form__container ${inputError ? 'error' : ''}`}>\r\n            <span className=\"add-point-form__label\">Добавить точку</span>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Новая точка маршрута\"\r\n                className=\"add-point-form__input\"\r\n                value={pointName}\r\n                onChange={handleInputChange}\r\n                onKeyDown={handleInputKeyDown}></input>\r\n            <span className=\"add-point-form__error\">{inputError}</span>\r\n        </div>        \r\n    )\r\n}\r\n\r\n\r\nCreatePointFormView.propTypes = {\r\n    addPoint: PropTypes.func,\r\n}\r\n\r\nexport default CreatePointFormView","import React from 'react'\r\nimport PropTypes, { func, number } from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { addPoint } from '../../../actions/actions'\r\nimport { mapCenterSelector } from '../../../selectors/index'\r\nimport CreatePointFormView from './CreatePointFormView'\r\n\r\nexport function CreatePointFormContainer({ addPoint, mapCenter }) {\r\n    const hundleAddPoint = (pointName) => {\r\n        addPoint(pointName, mapCenter)\r\n    }\r\n    return (\r\n        <CreatePointFormView addPoint={hundleAddPoint}/>\r\n    )\r\n}\r\n\r\nCreatePointFormContainer.propTypes = {\r\n    addPoint: func,\r\n    mapCenter: PropTypes.shape({\r\n        lat: number,\r\n        lng: number,\r\n    }),\r\n}\r\n\r\nexport default connect(\r\n    (store) => ({\r\n        mapCenter: mapCenterSelector(store)\r\n    }),\r\n    { addPoint }\r\n)(CreatePointFormContainer)","import React from \"react\"\r\nimport { Polyline } from '@react-google-maps/api'\r\n\r\nexport function Route({ points }) {\r\n    const path = points.reduce((result, point) => {\r\n        result.push(point.coordinates)\r\n        return result\r\n    }, [])\r\n\r\n    return (\r\n        <Polyline\r\n            path={path}\r\n            options={{\r\n                strokeColor: '#FF0000',\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: '#FF0000',\r\n                fillOpacity: 0.35,\r\n                clickable: false,\r\n                draggable: false,\r\n                editable: false,\r\n                visible: true,\r\n                radius: 30000,\r\n                zIndex: 1\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Route","import React from \"react\"\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport { Marker } from '@react-google-maps/api'\r\n\r\nexport function PointMarkers({ points, changePointCoordinate, onClick }) {\t\r\n    return (\r\n        points.map(point => ( \r\n\t\t\t<div key={point.id}>           \r\n\t\t\t\t<Marker\t\t\t\t\r\n\t\t\t\t\tposition={point.coordinates}\r\n\t\t\t\t\tonDragEnd={(event) => {\r\n\t\t\t\t\t\tchangePointCoordinate(point.id, {lat: event.latLng.lat(), lng: event.latLng.lng()})\t\t\t\t\t\t\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={() => onClick(point.id)}\r\n\t\t\t\t\tdraggable\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n        ))\r\n    )\r\n}\r\n\r\nPointMarkers.propTypes = {\r\n\tpoints: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n\t})),\r\n\tchangePointCoordinate: func,\r\n\tonClick: func,\r\n}\r\n\r\nexport default PointMarkers","import React from 'react'\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport { InfoWindow } from '@react-google-maps/api'\r\n\r\nexport function PointInfo({ point, onClose }) {\r\n    const { coordinates, name } = point\r\n    return (\r\n        <InfoWindow\r\n            position={coordinates}\r\n            onCloseClick={onClose}\r\n        >\r\n            <div className=\"point-info-window hidden\"\r\n                style={{'fontWeight': 'bold'}}>\r\n                <span>{name}</span>\r\n            </div>\r\n        </InfoWindow>\r\n    )\r\n}\r\n\r\nPointInfo.propTypes = {\r\n    point: PropTypes.shape({\r\n        id: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n    }),\r\n    onClose: func,\r\n}\r\n\r\nexport default PointInfo","import React, { useState } from \"react\"\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport { GoogleMap, LoadScript, useGoogleMap } from '@react-google-maps/api'\r\nimport Route from './Route/Route'\r\nimport PointMarkers from './PointMarkers/PointMarkers'\r\nimport PointInfo from './PointInfo/PointInfo'\r\n                            \r\nconst DEFAULT_CENTER = { lat: -41.253, lng: 174.751 }\r\nconst DEFAULT_ZOOM = 12\r\n\r\nfunction MapWithHook(props) {\r\n    const map = useGoogleMap()\r\n\r\n    React.useEffect(\r\n        function effect() {\r\n            map.addListener('center_changed', () => {\r\n                const lat = map.center.lat()\r\n                const lng = map.center.lng()\r\n\r\n                props.setLat(lat)\r\n                props.setLng(lng)\r\n            })\r\n        },\r\n        [map, props]\r\n    );\r\n\r\n    return (<></>)\r\n}\r\n\r\nconst MemoizedMapWithHook = React.memo(MapWithHook);\r\n\r\nexport function MapView({ points, onChangeMapCenter, changePointCoordinate }) {\r\n    const [lat, setLat] = useState(DEFAULT_CENTER.lat);\r\n    const [lng, setLng] = useState(DEFAULT_CENTER.lng);\r\n    const [isInfoOpen, setIsInfoOpen] = useState(true)\r\n    const [infoPoint, setInfoPoint] = useState()\r\n\r\n    const onMarkerClickHundler = (pointId) => {\r\n        if (pointId) {\r\n            setInfoPoint(points.find(point => point.id === pointId))\r\n            setIsInfoOpen(true)\r\n        }\r\n    }\r\n\r\n    const onInfoWindowCloseHundler = () => {\r\n        setIsInfoOpen(false)\r\n    }\r\n\r\n    const onMapClickHundler = () => {\r\n        setIsInfoOpen(false)\r\n    }\r\n\r\n    return (\r\n        <LoadScript\r\n            id=\"script-loader\"            \r\n            //googleMapsApiKey=\"YOUR_API_KEY\"\r\n            googleMapsApiKey=\"AIzaSyBwCOCQz1iTe1H8WPym6pHbw93MVlRp8tE\"\r\n        >\r\n            <GoogleMap\r\n                id=\"map\"\r\n                onCenterChanged={() => onChangeMapCenter({ lat, lng })}\r\n                mapContainerStyle={{\r\n                    height: \"100%\",\r\n                    width: \"100%\"\r\n                }}\r\n                zoom={DEFAULT_ZOOM}\r\n                center={{lat, lng}}\r\n                onClick={onMapClickHundler}\r\n            >\r\n                <PointMarkers\r\n                    points={points}\r\n                    changePointCoordinate={changePointCoordinate}\r\n                    onClick={onMarkerClickHundler}\r\n                />\r\n                <Route \r\n                    points={points} \r\n                />\r\n                {isInfoOpen && infoPoint ? (\r\n                        <PointInfo point={infoPoint} onClose={onInfoWindowCloseHundler}/>\r\n                    ) : (<></>)\r\n                }\r\n                <MemoizedMapWithHook \r\n                    setLat={setLat} \r\n                    setLng={setLng} \r\n                />\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    )\r\n}\r\n\r\nMapView.propTypes = {\r\n    points: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n    })),\r\n    onChangeMapCenter: func,\r\n    changePointCoordinate: func,\r\n}\r\n\r\nexport default MapView","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Subject } from 'rxjs'\r\nimport { debounceTime } from 'rxjs/operators'\r\nimport PropTypes, { number, string, func } from 'prop-types'\r\nimport { pointArraySelector } from '../../selectors/index'\r\nimport { changeMapCenter, changePointCoordinate } from '../../actions/actions'\r\nimport MapView from './MapView'\r\n\r\nexport function MapContainer({ points, changeMapCenter, changePointCoordinate }) {\r\n    const changeCenterObserver = new Subject()\r\n    changeCenterObserver\r\n        .pipe(\r\n            debounceTime(300),\r\n        )\r\n        .subscribe((center) => {\r\n            if (center) {\r\n                changeMapCenter(center)\r\n            }\r\n        })\r\n\r\n    return (\r\n        <MapView\r\n            points={points}\r\n            onChangeMapCenter={center => changeCenterObserver.next(center)}\r\n            changePointCoordinate={changePointCoordinate}\r\n        />\r\n    )\r\n}\r\n\r\nMapContainer.propTypes = {\r\n    points: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: number,\r\n        index: number,\r\n        coordinates: PropTypes.shape({\r\n            lat: number,\r\n            lng: number,\r\n        }),\r\n        name: string,\r\n    })),\r\n    changeMapCenter: func,\r\n    changePointCoordinate: func,\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        points: pointArraySelector(state)\r\n    }),\r\n    { changeMapCenter, changePointCoordinate }\r\n)(MapContainer)","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store/store'\r\nimport PointListContainer from './components/pointList/PointListContainer'\r\nimport CreatePointFormContainer from './components/pointForm/cratePointForm/CreatePointFormContainer'\r\nimport MapContainer from './components/map/MapContainer'\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"main-container\">\r\n        <div className=\"main-container__points-column\">\r\n          <CreatePointFormContainer />\r\n          <PointListContainer />\r\n        </div>\r\n        <div className=\"main-container__map-column\">\r\n          <MapContainer />\r\n        </div>\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}